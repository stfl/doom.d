#+title: doom-emacs config
#+startup: overview
#+PROPERTY: header-args:elisp :noeval

* General
** User Information
:PROPERTIES:
:ID:       47537e03-28e5-4adf-ac0b-ab8249ce01bf
:END:

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+BEGIN_SRC elisp
(setq user-full-name "Stefan Lendl"
      user-mail-address "ste.lendl@gmail.com")
#+END_SRC

** literate config
*** Don't auto-recompile literate-config
:PROPERTIES:
:ID:       7f52c1ee-6fff-4e04-96fa-8c5a2bf3ad14
:END:

#+BEGIN_SRC elisp
(remove-hook 'org-mode-hook #'+literate-enable-recompile-h)
#+END_SRC

*** private config file
:PROPERTIES:
:ID:       b1cd6206-b586-45d7-8b1f-e03823bde124
:END:

~doom/goto-private-config-file~ goes to ~config.el~ which I will never edit by hand.
Opening ~config.org~ makes much more sense.

#+begin_src elisp
(defun stfl/goto-private-config-file ()
  "Open your private config.el file."
  (interactive)
  (find-file (expand-file-name "config.or
#+begin_src elisp
(use-package! lsp-bridge
  :config
  (setq! lsp-bridge-user-langserver-dir (doom-path doom-private-dir "langserver")
         lsp-bridge-enable-inlay-hint t
         lsp-bridge-enable-hover-diagnostic t
         ;; lsp-bridge-enable-signature-help t
         ;; lsp-bridge-enable-auto-format-code nil
         ;; lsp-bridge-enable-org-babel t
         lsp-bridge-log-level 'default
         ;; acm-enable-capf t
         )
  ;; (map! :map ?? lsp-bridge-map)
  (global-lsp-bridge-mode))
#+end_src

** Code Formatting



mapping doom's ~+format/buffer~ and ~+format/region~

#+begin_src elisp
(map! (:when (modulep! :editor format)
       :v "g Q" '+format/region
       :v "SPC =" '+format/region
       :leader
       :desc "Format Buffer" "=" #'+format/buffer
       (:prefix ("b" "+buffer")
        :desc "Format Buffer" "f" #'+format/buffer)))
#+end_src

** PHP
:PROPERTIES:
:ID:       1a38710f-565e-4680-bc53-b39f3d955b71
:END:

#+BEGIN_SRC elisp
(after! (lsp-mode php-mode)
  (setq lsp-intelephense-licence-key (get-auth-info "intelephense" "ste.lendl@gmail.com")
        lsp-intelephense-files-associations '["*.php" "*.phtml" "*.inc"]
        lsp-intelephense-files-exclude '["**update.php**" "**/js/**" "**/fonts/**" "**/gui/**" "**/upload/**"
                                         "**/.git/**" "**/.svn/**" "**/.hg/**" "**/CVS/**" "**/.DS_Store/**"
                                         "**/node_modules/**" "**/bower_components/**"
                                         "**/vendor/**/{Test,test,Tests,tests}/**"]
        lsp-auto-guess-root nil
        lsp-idle-delay 0.8))
#+END_SRC

** Python
*** poetry

Poetry needs to scan for a project whenever a new file is opened. Tracking via
projectile speeds this up significantly.

#+begin_src elisp
(after! poetry (setq poetry-tracking-strategy 'projectile))
#+end_src

*** conda

automatically activate a conda environment if present in a project

#+begin_src elisp
(after! conda (conda-env-autoactivate-mode))
#+end_src

projectile does not recognize conda projects

#+begin_src elisp
(after! projectile
  (projectile-register-project-type 'python-conda '("environment.yml")
                                    :project-file "environment.yml"
                                    :compile "conda build"  ;; does not exist
                                    :test "conda run pytest"
                                    :test-dir "tests"
                                    :test-prefix "test_"
                                    :test-suffix"_test"))
#+end_src

*** numpydoc.el

#+begin_src elisp :tangle packages.el
;; (package! numpydoc)
#+end_src

#+begin_src elisp
;; (use-package! numpydoc
;;   :after python-mode
;;   :commands numpydoc-generate
;;   :config
;;   (map! :map python-mode-map
;;         :localleader
;;         :prefix ("d" . "docstring")
;;         :desc "Generate Docstring" "d" #'numpydoc-generate))
#+end_src

*** emacs ipython notebook (ein)

ein displays images in a separate window by default. Use inline images instead

#+begin_src elisp
(after! ein
  (setq! ein:output-area-inlined-images t
         ein:worksheet-warn-obsolesced-keybinding nil))
#+end_src

To enable this in the notebook, configure matplotlib to produce inline images.

#+begin_src python :tangle nil
%matplotlib inline
#+end_src

don't kill the *ein: buffer with ~ESC~ which causes the buffer not to work properly

org babel integration for ein

#+begin_src elisp
(when (modulep! :tools ein)
  (after! org
    (require 'ob-ein)))
#+end_src

*** emacs-jupyter

header arguments to for jupyter-python to work with plotly

#+begin_src elisp
(after! org
  (setq org-babel-default-header-args:jupyter-python
        '((:results . "value")
          (:session . "jupyter")
          (:kernel . "python3")
          (:pandoc . "t")
          (:exports . "both")
          (:cache . "no")
          (:noweb . "no")
          (:hlines . "no")
          (:tangle . "no")
          (:eval . "never-export"))))
#+end_src

*** Debug Test at point workaround

debugging python tests at point do not work with the default configuration.
might be merged upstream: https://github.com/emacs-lsp/dap-mode/pull/590

#+begin_src elisp
(after! (python-mode dap-mode)
  (dap-register-debug-template "Python :: Run pytest (at point) -- Workaround"
                             (list :type "python-test-at-point  "
                                   :args ""
                                   :program nil
                                   :module "pytest"
                                   :request "launch"
                                   :name "Python :: Run pytest (at point)")))
#+end_src

** Rust

#+begin_src elisp
(map!
 :mode rustic-mode
 :map rustic-mode-map
 :localleader
 :desc "rerun test" "t r" #'rustic-cargo-test-rerun
 )
#+end_src

#+begin_src elisp
(after! rustic
  (when (executable-find "cargo-nextest")
    (setq! rustic-cargo-test-runner 'nextest)))
#+end_src

Configure inlay type hints

This requires ~lsp-inlay-hint-enable~ as configured in [[* Inlay Hints][LSP/Inlay Hints]]

#+begin_src elisp
(after! lsp-rust
  (setq! lsp-rust-analyzer-binding-mode-hints t
  ;;        lsp-rust-analyzer-display-chaining-hints t
  ;;        lsp-rust-analyzer-display-closure-return-type-hints t
         lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial"
  ;;        lsp-rust-analyzer-display-parameter-hints t
  ;;        lsp-rust-analyzer-hide-named-constructor t
         lsp-rust-analyzer-max-inlay-hint-length 40  ;; otherwise some types can get way out of hand
         )
  )
#+end_src

configre dap-mode for rust

#+begin_src elisp
(after! (rust-mode dap-mode)
  (dap-register-debug-template "Rust::GDB Run Configuration"
                               (list :type "gdb"
                                     :request "launch"
                                     :name "GDB::Run"
                                     :gdbpath "rust-gdb"
                                     :target nil
                                     :cwd nil)))
#+end_src

** Nix

set alejandra as the formatter

#+begin_src elisp
(after! nix-mode
  (set-formatter! 'alejandra '("alejandra" "--quiet") :modes '(nix-mode)))
#+end_src

Disable formatting with lsp

#+begin_src elisp
(setq-hook! 'nix-mode-hook +format-with-lsp nil)
#+end_src

** MQL
:PROPERTIES:
:ID:       c3da477e-b64b-4a50-af87-5fdec1fd62ab
:END:

#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.mq[45h]\\'" . cpp-mode))
#+END_SRC

** Gitlab-CI
:PROPERTIES:
:ID:       2e1016eb-5a16-464e-a8bb-2a458f26db3d
:END:

#+BEGIN_SRC elisp
;; (use-package! gitlab-ci-mode
;;   :mode ".gitlab-ci.yml"
;;   )

;; (use-package! gitlab-ci-mode-flycheck
;;   :after flycheck gitlab-ci-mode
;;   :init
;;   (gitlab-ci-mode-flycheck-enable))
#+END_SRC

** Kubernetes
:PROPERTIES:
:ID:       fd4fae8c-3a70-449f-b3d5-52c25f76ec0a
:END:


#+begin_src elisp :tangle packages.el
(package! kubernetes :disable t)
(package! kubernetes-evil :disable t)
(package! kubernetes-helm :disable t)
(package! k8s-mode :disable t)
#+end_src

#+begin_src elisp
(use-package! kubernetes
  :commands (kubernetes-overview))
#+end_src

#+begin_src elisp
(use-package! kubernetes-evil
  :after kubernetes)
#+end_src

#+begin_src elisp
(use-package! kubernetes-helm
  :commands kubernetes-helm-status)
#+end_src

#+begin_src elisp
(use-package! k8s-mode
  :after yaml-mode
  :hook (k8s-mode . yas-minor-mode))
#+end_src

** SQL
:PROPERTIES:
:ID:       4efebc11-28ba-4f18-a758-a4af693d6f69
:END:

#+begin_src elisp :tangle packages.el
(package! sql-indent)
#+end_src

#+begin_src elisp
(use-package! sql-indent
  :after sql-mode
)
#+end_src

** Database Interface (edbi)
:PROPERTIES:
:ID:       e54ac6a8-7cf4-47ea-abe6-500512022534
:END:

[[roam:edbi setup]]

EDBI has some dependencies has some dependencies
[[https://github.com/kiwanami/emacs-edbi#installation][Installation Instructions]]

#+begin_src elisp :tangle packages.el
(package! edbi :disable t)
(package! edbi-minor-mode :disable t)
#+end_src

#+begin_src elisp
(use-package! edbi
  :commands 'edbi:open-db-viewer
  )
#+end_src

#+begin_src elisp

(use-package! edbi-minor-mode
  :after sql-mode
  :hook sql-mode-hook
  )
;; (add-hook 'sql-mode-hook 'edbi-minor-mode)
#+end_src

** Practice coding with Exercism

[[https://exercism.org][Exercism]] is a platform for learning various programing languages by solving
small exercises. The exercises can can be solved locally.

[[https://exercism.org/docs/using/solving-exercises/working-locally][Local Setup Instructions]]

#+begin_src elisp :tangle packages.el
(package! exercism-mode :recipe (:host github :repo "timotheosh/exercism-mode") :disable t)
#+end_src

#+begin_src elisp
(use-package! exercism-mode
  :after projectile
  :if (executable-find "exercism")
  :commands exercism
  :config (exercism-mode +1)
  :custom (exercism-web-browser-function 'browse-url))
#+end_src

** Javascript | Typescript
*** Jest Testing Framework

#+begin_src elisp :tangle packages.el
(package! jest)
#+end_src

#+begin_src elisp
(map! :after rjsx-mode
      :map rjsx-mode-map
      :localleader
      :prefix ("t" "test")
      "f" #'jest-file
      "t" #'jest-function
      "k" #'jest-file-dwim
      "m" #'jest-repeat
      "p" #'jest-popup)
#+end_src

** Perl

always use the better cperl-mode instead of perl-mode.
This will be the default in Emacs 30 (if I remember correctly)

#+begin_src elisp
(add-to-list 'major-mode-remap-alist '(perl-mode . cperl-mode))
#+end_src

** Logview

#+begin_src elisp :tangle packages.el
(package! logview :disable t)
#+end_src

#+begin_src elisp
(use-package! logview
  :commands logview-mode
  :config (setq truncate-lines t)
  (map! :map logview-mode-map
        "j" #'logview-next-entry
        "k" #'logview-previous-entry))
#+end_src

The default keymap binds directly to ~f t T a A ...~
switch to evil-emacs-mode ~C-z~ to use the keybindings.

** Spell- Grammer Checking
*** LTEX

#+begin_src elisp :tangle packages.el
(package! lsp-ltex
  :disable t
  )
#+end_src

manually add adoc-mode to the list.. I don't like that...

#+begin_src elisp
;; (add-to-list 'lsp-ltex-active-modes 'adoc-mode t)
(setq lsp-ltex-active-modes '(text-mode bibtex-mode context-mode latex-mode markdown-mode org-mode rst-mode adoc-mode))
#+end_src

#+begin_src elisp
(use-package! lsp-ltex
  :after ;; (lsp-mode adoc-mode)
        lsp-ltex-active-modes
  :hook (adoc-mode . (lambda ()
                       (require 'lsp-ltex)
                       (lsp-deferred)))  ; or lsp-deferred
  :init
  (setq lsp-ltex-server-store-path "~/.nix-profile/bin/ltex-ls"
        lsp-ltex-version "16.0.0"
        lsp-ltex-mother-tongue "de-AT"
        lsp-ltex-user-rules-path (doom-path doom-private-dir "lsp-ltex")))
#+end_src

** Proxmox development
:PROPERTIES:
:header-args:elisp: :tangle no
:END:

_tangle is disabled for the entire section_ and is only kept as a reference!

*** AsciiDoc (adoc)

#+begin_src elisp :tangle packages.el
;; bbatsov/adoc-mode
(package! adoc-mode)
#+end_src

~TODO~ adoc-mode requires org due to inhereting the theme

#+begin_src elisp
(use-package! adoc-mode
  :defer t
  :config
  (map! :map adoc-mode-map
        :localleader
        :desc "consult headers in this file" "." #'consult-imenu
        :desc "consult headers in project" "/" #'consult-imenu-multi
        "p" #'treemacs-find-tag))
#+end_src

#+begin_src elisp
(after! lsp-mode
  (add-to-list 'lsp-language-id-configuration '(adoc-mode . "org") t))
#+end_src

*** Magit Default Sign-Off commits

#+begin_src elisp
(after! magit
  (setq transient-values  '((magit-commit "--signoff"))))
#+end_src

*** Javascript indentation style

This is still broken...

#+begin_src elisp
(setq-hook! 'rjsx-mode-hook
  indent-tabs-mode t
  tab-width 8)

(setq-hook! 'js-mode-hook
  indent-tabs-mode t
  tab-width 8)

(setq-hook! 'js2-mode-hook
  indent-tabs-mode t
  tab-width 8)
#+end_src

#+begin_src elisp
(after! js
  (setq js-indent-level 4
        js-jsx-indent-level 4
        tab-width 8))
#+end_src

*** Perl intendation style

#+begin_src elisp
(setq! cperl-indent-level 4
       cperl-close-paren-offset -4
       cperl-continued-statement-offset 4
       cperl-indent-parens-as-block t)
#+end_src

Proxmox specific Perl indentation style using a tab where 8 spaces would be used.

#+begin_src elisp
(setq-hook! 'cperl-mode-hook
  tab-width 8
  indent-tabs-mode t)
#+end_src

*** notmuch

#+begin_src elisp
(after! notmuch
  (setq +notmuch-sync-backend 'mbsync
        +notmuch-mail-folder "~/Mail"
        notmuch-draft-folder "proxmox/Entw&APw-rfe"
        notmuch-fcc-dirs "proxmox/Sent"
        notmuch-mua-cite-function 'message-cite-original-without-signature
        notmuch-mua-compose-in 'current-window
        notmuch-show-logo nil
        notmuch-hello-indent 0  ;; do not indent because it works better with evil navigation
        notmuch-tag-formats '(("unread" (propertize tag 'face 'notmuch-tag-unread)))
        notmuch-saved-searches
        '((:key "i" :name "󰇮 inbox"   :query "tag:inbox and not tag:archive")
          (:key "f" :name " flagged" :query "tag:flagged")
          (:key "m" :name "󰇮 my PRs"  :query "tag:my-pr and not tag:archive and not tag:killed and not tag:deleted and not tag:inbox")
          (:key "w" :name "󰇮 watch"   :query "tag:watch and not tag:my-pr and not tag:archive and not tag:killed and not tag:deleted and not tag:inbox")
          (:key "t" :name "󰇮 team"    :query "tag:lists/team and not tag:archive and not tag:inbox")
          (:key "b" :name " My Bugs" :query "tag:bugs and tag:to-me and not tag:archive and not tag:inbox")
          (:key "s" :name " support (new)" :query "tag:support-new and not tag:archive and not tag:killed")
          (:key "r" :name " review"  :query "tag:review and not tag:archive and not tag:killed and not tag:inbox")
          (:key "d" :name " drafts"  :query "tag:draft and not tag:archive and not tag:deleted")
          ;; (:key ">" :name "󰗕 sent"    :query "tag:sent and not tag:archive")
          (:key "M" :name " my PRs" :query "tag:my-pr and not tag:killed and not tag:deleted and not tag:inbox")
          (:key "W" :name " watch" :query "tag:watch and not tag:killed and not tag:deleted and not tag:inbox")
          (:key "B" :name " Bugzilla" :query "tag:bugs and not tag:archive and not tag:inbox")
          (:key "S" :name " support" :query "tag:support and not tag:archive and not tag:killed and not tag:inbox")
          (:key "P" :name " pkgs"    :query "tag:lists/pkgs and not tag:archive and not tag:inbox"))
        notmuch-archive-tags '("+archive" "-inbox" "-unread")
        +notmuch-spam-tags '("+spam" "-inbox" "-unread")
        +notmuch-delete-tags '("+trash" "-inbox" "-unread")

        stfl/notmuch-unwatch-tags (append notmuch-archive-tags '("-my-pr" "-watch" "-review"))
        stfl/notmuch-kill-tags (cons "+killed" stfl/notmuch-unwatch-tags)

        message-hidden-headers nil  ;; don't hide any headers to verify In-reply-to and Reference headers
        notmuch-mua-hidden-headers nil

        message-sendmail-f-is-evil 't
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function 'message-send-mail-with-sendmail
        sendmail-program "msmtp")
  (add-to-list '+word-wrap-disabled-modes 'notmuch-show-mode)
  (add-hook! 'notmuch-hello-mode-hook #'read-only-mode)
  (defun +notmuch-get-sync-command ()
    "mbsync -a && notmuch new && afew -n -t"))
#+end_src

Additional functions to apply tags according to my workflow

#+begin_src elisp
(after! notmuch
  (defun stfl/notmuch-search-unwatch-thread (&optional unarchive beg end)
    (interactive (cons current-prefix-arg (notmuch-interactive-region)))
    (let ((notmuch-archive-tags stfl/notmuch-unwatch-tags))
      (notmuch-search-archive-thread unarchive beg end)))

  (defun stfl/notmuch-search-kill-thread (&optional unarchive beg end)
    (interactive (cons current-prefix-arg (notmuch-interactive-region)))
    (let ((notmuch-archive-tags stfl/notmuch-kill-tags))
      (notmuch-search-archive-thread unarchive beg end)))
  )
#+end_src

Use the (almost) default keybindings in evil normal-mode

#+begin_src elisp
(map! :after notmuch
      :map notmuch-common-keymap
      :n "?" #'notmuch-help
      :map notmuch-show-mode-map
      ;; :g "<mouse-1>" #'notmuch-show-toggle-message
      ;; :g "<mouse-2>" #'notmuch-show-toggle-message
      ;; :desc "toggle show message" :n "<tab>" #'notmuch-show-toggle-message
      ;; :desc "toggle show message" :n "C-<tab>" #'notmuch-show-open-or-close-all
      :g "C-c C-e" #'notmuch-show-resume-message
      :n "ge" #'notmuch-show-resume-message
      ;; :n "A" '(λ! (notmuch-search-tag-all "-archive -my-pr -watch"))  ;; TODO need to tag ENTIRE thread oterhwise it will be tagged again with afew
      :map notmuch-tree-mode-map
      :g "C-c C-e" #'notmuch-tree-resume-message
      :n "ge" #'notmuch-tree-resume-message
      :n "A" (λ! (notmuch-tree-tag-thread stfl/notmuch-unwatch-tags))
      :n "K" (λ! (notmuch-tree-tag-thread stfl/notmuch-kill-tags))
      :map notmuch-search-mode-map
      :n "A" #'stfl/notmuch-search-unwatch-thread
      :n "K" #'stfl/notmuch-search-kill-thread
      ;; :map notmuch-message-mode-map
      ;; :n "SPC f s" #'notmuch-draft-save
      )
#+end_src

#+begin_src elisp
(after! notmuch
  (defun stfl/notmuch-hello-update-background ()
    "Update notmuch-hello buffer. If we are in another frame, allow switch to it so it will be formatted correctly."
    (let ((no-display (eq (selected-frame)
                          (window-frame (display-buffer "*notmuch-hello*")))))
      (notmuch-hello no-display)))

  (run-with-idle-timer 60 t #'stfl/notmuch-hello-update-background))
#+end_src

** ssh-config-mode

#+begin_src elisp :tangle packages.el
(package! ssh-config-mode
  ;; :recipe (:host github
           ;; :repo "jhgorrell/ssh-config-mode-el"
           ;; :files ("*.el" "out"))
  )
#+end_src

#+begin_src elisp
(use-package! ssh-config-mode :defer t)
#+end_src

** BitBake

#+begin_src elisp :tangle packages.el
(package! bitbake-ts-mode)
#+end_src

#+begin_src elisp
(use-package! bitbake-ts-mode
  :config (add-to-list 'auto-mode-alist '("\\.inc$" . bitbake-ts-mode)))
#+end_src

Setup custom bitbake language server for bitbake-ts-mode via lsp-bridge.

#+begin_src elisp
(after! lsp-bridge
  (add-to-list 'lsp-bridge-single-lang-server-mode-list
               ;; '(bitbake-ts-mode . "bitbake-language-server")
               '(bitbake-ts-mode . "language-server-bitbake")))
#+end_src

lsp-bridge requires a json config file to configure the language server.
=NOTE:= the ~:tangle "langserver/<server>.json"~ needs to match the alist above ~(<mode> . <server>)~

#+begin_src js :eval no :tangle "langserver/bitbake-language-server.json"
{
    "name": "bitbake-language-server",
    "languageId": "bitbake",
    "command": [ "bitbake-language-server" ],
    "settings": {}
}
#+end_src

Alternative bitbake lsp from the vscode-bitbake project.

#+begin_src js :eval no :tangle "langserver/language-server-bitbake.json"
{
    "name": "language-server-bitbake",
    "languageId": "bitbake",
    "command": [ "/home/stefan/node_modules/language-server-bitbake/out/server.js", "--stdio" ],
    "settings": {}
}
#+end_src

    "command": [ "language-server-bitbake", "--stdio" ],

#+begin_src elisp :tangle packages.el
;; (package! bitbake-modes
;;   :recipe (:host bitbucket
;;            :repo "olanilsson/bitbake-modes"
;;            ;; :files ("*.el")
;;            ))
#+end_src

#+begin_src elisp
;; (use-package! bitbake-modes
;;   :config (add-to-list 'auto-mode-alist '("\\.inc$" . bitbake-mode))
;;   :defer t)
#+end_src

#+begin_src elisp :tangle packages.el
;; (package! bb-mode
;;   :recipe (:host github
;;            :repo "mferland/bb-mode"
;;            :files ("*.el")))
#+end_src

#+begin_src elisp
;; (use-package bb-modes
;;   :init
;;   (add-to-list 'auto-mode-alist '("\\.bb" . bb-mode))
;;   (add-to-list 'auto-mode-alist '("\\.bbappend" . bb-mode))
;;   (add-to-list 'auto-mode-alist '("\\.bbclass" . bb-mode))
;;   (add-to-list 'auto-mode-alist '("\\conf/.conf" . bb-mode))
;;   (add-to-list 'auto-mode-alist '("\\.inc$" . bb-mode))
;;   :config
;;   (bitbake-lsp-register))
#+end_src

#+begin_src elisp
;; (defun bitbake-lsp-register ()
;;   "Register to start using this language server."
;;   (interactive)
;;   (add-to-list 'lsp-language-id-configuration '(bb-mode . "bitbake"))
;;     (lsp-register-client
;;      (make-lsp-client :new-connection
;;                       (lsp-stdio-connection `(,(executable-find "bitbake-language-server")))
;;                       :activation-fn (lsp-activate-on "*.bb" "*.bbappend" "*.bbclass" "*.inc" "conf/*.conf")
;;                       :server-id 'bitbake)))
#+end_src

** Meson build system

#+begin_src elisp :tangle packages.el
(package! meson-mode :disable t)
#+end_src

#+begin_src elisp
(use-package! meson-mode
  :config (add-hook! 'meson-mode-hook #'company-mode))
#+end_src

** C/C++

#+begin_src elisp
(after! projectile
  (add-to-list 'projectile-globally-ignored-directories ".ccls-cache"))
#+end_src

#+begin_src elisp
(defun run-ctest (arg)
  (interactive "P")
  (let ((projectile-project-test-cmd "cmake --build build && ctest --test-dir build --output-on-failure --rerun-failed"))
    (projectile-test-project arg)))


(map! ;;:after cc-mode
      :mode c++-mode
      :map c++-mode-map
      :localleader 
      :prefix ("t" "test")
      :n "t" #'run-ctest
      ;; :n "t" #'gtest-run-at-point
      ;; :n "T" #'gtest-run
      ;; :n "l" #'gtest-list
      )

#+end_src

#+begin_src elisp
;; (after! lsp-mode
;;   (set-lsp-priority! 'ccls 2))
#+end_src

#+begin_src elisp :tangle packages.el
;; (package! gtest-mode
;;   :recipe (:host github
;;            :repo "ppatoria/elisp"
;;            :files ("gtest-mode/*.el")))
#+end_src

#+begin_src elisp
;; (use-package! gtest-mode
;;   ;; :after c++-mode
;;   :config
;;   (map! :map gtest-mode-map
;;         :localleader 
;;         :prefix ("t" "test")
;;         :n "t" #'gtest-run-at-point
;;         :n "T" #'gtest-run
;;         :n "l" #'gtest-list))
#+end_src

** Turbo Log

#+begin_src elisp :tangle packages.el
(package! turbo-log :recipe (:host github :repo "artawower/turbo-log"))
#+end_src

#+begin_src elisp
(use-package! turbo-log
  :after prog-mode
  :config
  (map! :leader
        "l l" #'turbo-log-print
        "l i" #'turbo-log-print-immediately
        "l h" #'turbo-log-comment-all-logs
        "l s" #'turbo-log-uncomment-all-logs
        "l [" #'turbo-log-paste-as-logger
        "l ]" #'turbo-log-paste-as-logger-immediately
        "l x" #'turbo-log-delete-all-logs)
  (setq turbo-log-msg-format-template "\"🚀: %s\""
        turbo-log-allow-insert-without-tree-sitter-p t))
#+end_src

** just

#+begin_src elisp :tangle packages.el
(package! just-mode)
#+end_src

#+begin_src elisp
(use-package just-mode)
#+end_src

#+begin_src elisp :tangle packages.el
(package! justl :recipe (:host github :repo "psibi/justl.el") :disable t)
#+end_src

#+begin_src elisp
(use-package justl
  :disabled
  )
  ;; :config
  ;; (map! :n "e" 'justl-exec-recipe))
#+end_src

* Collaboration and VCS
** Directory tree diff - ztree
:PROPERTIES:
:ID:       74eab92f-af80-47ab-b6ac-0712d7e87699
:END:

#+begin_src elisp :tangle packages.el
(package! ztree :disable t)
#+end_src

#+BEGIN_SRC elisp
(use-package! ztree)
#+END_SRC

** Magit
*** Enable Gravatars

This will enable gravatars when viewing commits. The service used by default is [[https://www.libravatar.org/][Libravatar]].
#+BEGIN_SRC elisp
;; (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+END_SRC

*** Enable granular diff-highlights for all hunks

By default, changes are highlighted *line-wise* for all but the selected hunk. This
has [[https://magit.vc/manual/magit/Performance.html][performance reasons]]. You can enable character-wise highlights for all
visible hunks with:

#+BEGIN_SRC elisp
(after! magit
  (setq magit-diff-refine-hunk 'all))
#+END_SRC

*** Forge
:PROPERTIES:
:ID:       0ed4b14f-b9cd-4b13-b17e-633213db7418
:END:

display more columns in forge list topic
#+BEGIN_SRC elisp
(after! forge (setq forge-topic-list-columns
                    '(("#" 5 t (:right-align t) number nil)
                      ("Title" 60 t nil title  nil)
                      ("State" 6 t nil state nil)
                      ("Marks" 8 t nil marks nil)
                      ("Labels" 8 t nil labels nil)
                      ("Assignees" 10 t nil assignees nil)
                      ("Updated" 10 t nill updated nil))))
#+END_SRC

*** with-editor

# #+BEGIN_SRC elisp
# (use-package! with-editor
#   :after magit
#   :config
#   (define-key (current-global-map)
#     [remap async-shell-command] 'with-editor-async-shell-command)
#   (define-key (current-global-map)
#     [remap shell-command] 'with-editor-shell-command)

#   (add-hook 'shell-mode-hook  'with-editor-export-editor)
#   (add-hook 'term-exec-hook   'with-editor-export-editor)
#   (add-hook 'eshell-mode-hook 'with-editor-export-editor)

#   (add-hook 'shell-mode-hook 'with-editor-export-git-editor)
# )
# #+END_SRC

*** magit-todos

#+begin_src elisp :tangle packages.el
(package! magit-todos :disable t)
#+end_src

activate magit-todo to display the TODOs section in magit buffer

#+begin_src elisp
(use-package! magit-todos
  :after magit
  :config
  (setq! magit-todos-exclude-globs '(".git/" "node_modules/"))
  (magit-todos-mode 1))
#+end_src

** E-Mail
:PROPERTIES:
:ID:       8e96aa1e-257e-4826-a0bb-6c3be8537fe9
:END:

*** mailscripts.el

https://github.com/spwhitton/mailscripts/blob/master/mailscripts.el

The original purpose of this package was to make it easy to use the small
mail-handling utilities shipped in Debian's 'mailscripts' package from
within Emacs.  It now also contains some additional, thematically-related
utilities which don't invoke any of those scripts.

Entry points you might like to look at if you're new to this package:
mailscripts-prepare-patch, notmuch-slurp-debbug,
notmuch-extract-{thread,message}-patches{,-to-project}.


#+begin_src elisp :tangle packages.el
;; (package! mailscripts.el
;;   :recipe (:host github :repo "spwhitton/mailscripts" :files ("mailscripts.el")))
#+end_src

*** mu4e
:PROPERTIES:
:ID:       9caa475f-fe10-4a07-9696-c8ff031a1fd4
:END:

#+begin_src elisp
;; (set-email-account! "gmail"
;;   '((mu4e-sent-folder       . "/gmail/[Google Mail]/Gesendet")
;;     (mu4e-drafts-folder     . "/gmail/[Google Mail]/Entw&APw-rfe")
;;     (mu4e-trash-folder      . "/gmail/[Google Mail]/Trash")
;;     (mu4e-refile-folder     . "/gmail/[Google Mail]/Alle Nachrichten")
;;     (smtpmail-smtp-user     . "ste.lendl@gmail.com")
;;     ;; (+mu4e-personal-addresses . "ste.lendl@gmail.com")
;;     ;; (mu4e-compose-signature . "---\nStefan Lendl")
;;     )
;;   t)
#+end_src

#+begin_src elisp
;; (set-email-account! "pulswerk"
;;   '((mu4e-sent-folder       . "/pulswerk/Sent Items")
;;     (mu4e-drafts-folder     . "/pulswerk/Drafts")
;;     (mu4e-trash-folder      . "/pulswerk/Deleted Items")
;;     (mu4e-refile-folder     . "/pulswerk/Archive")
;;     (smtpmail-smtp-user     . "lendl@pulswerk.at")
;;     ;; (+mu4e-personal-addresses . "lendl@pulswerk.at")
;;     ;; (mu4e-compose-signature . "---\nStefan Lendl")
;;     )
;;   t)
#+end_src

#+begin_src elisp
(after! mu4e
  ;; (setq +mu4e-gmail-accounts '(("ste.lendl@gmail.com" . "/gmail")))
  (setq mu4e-context-policy 'ask-if-none
        mu4e-compose-context-policy 'always-ask)

  (setq mu4e-maildir-shortcuts
    '((:key ?g :maildir "/gmail/Inbox"   )
      (:key ?p :maildir "/pulswerk/INBOX")
      (:key ?u :maildir "/gmail/Categories/Updates")
      (:key ?j :maildir "/pulswerk/Jira"  )
      (:key ?l :maildir "/pulswerk/Gitlab" :hide t)
      ))

  (setq mu4e-bookmarks
        '(
          (:key ?i :name "Inboxes" :query "not flag:trashed and (m:/gmail/Inbox or m:/pulswerk/INBOX)")
          (:key ?u :name "Unread messages"
           :query
           "flag:unread and not flag:trashed and (m:/gmail/Inbox or m:/gmail/Categories/* or m:/pulswerk/INBOX or m:\"/pulswerk/Pulswerk Alle\" or m:/pulswerk/Jira or m:/pulswerk/Gitlab)")
          (:key ?p :name "pulswerk Relevant Unread" :query "flag:unread not flag:trashed and (m:/pulswerk/INBOX or m:\"/pulswerk/Pulswerk Alle\" or m:/pulswerk/Jira or m:/pulswerk/Gitlab)")
          (:key ?g :name "gmail Relevant Unread" :query "flag:unread not flag:trashed and (m:/gmail/Inbox or m:/gmail/Categories/*)")
          ;; (:key ?t :name "Today's messages" :query "date:today..now" )
          ;; (:key ?y :name "Yesterday's messages" :query "date:2d..1d")
          ;; (:key ?7 :name "Last 7 days" :query "date:7d..now" :hide-unread t)
          ;; ;; (:name "Messages with images" :query "mime:image/*" :key 112)
          ;; (:key ?f :name "Flagged messages" :query "flag:flagged")
          ;; (:key ?g :name "Gmail Inbox" :query "maildir:/gmail/Inbox and not flag:trashed")
          ))
  )
#+end_src

set up the query for mu4e-alert to also limit the search range
#+begin_src elisp
(after! mu4e-alert
  (setq mu4e-alert-interesting-mail-query
           "flag:unread and not flag:trashed and (m:/gmail/Inbox or m:/gmail/Categories/Updates or m:/pulswerk/INBOX or m:\"/pulswerk/Pulswerk Alle\" or m:/pulswerk/Jira or m:/pulswerk/Gitlab)"))
#+end_src

#+begin_src elisp
(after! mu4e
  (setq mu4e-headers-fields
        '((:flags . 6)
          (:account-stripe . 2)
          (:from-or-to . 25)
          (:folder . 10)
          (:recipnum . 2)
          (:subject . 80)
          (:human-date . 8))
        +mu4e-min-header-frame-width 142
        mu4e-headers-date-format "%d/%m/%y"
        mu4e-headers-time-format "⧖ %H:%M"
        mu4e-headers-results-limit 1000
        mu4e-index-cleanup t)

  (defvar +mu4e-header--folder-colors nil)
  (appendq! mu4e-header-info-custom
            '((:folder .
               (:name "Folder" :shortname "Folder" :help "Lowest level folder" :function
                (lambda (msg)
                  (+mu4e-colorize-str
                   (replace-regexp-in-string "\\`.*/" "" (mu4e-message-field msg :maildir))
                   '+mu4e-header--folder-colors)))))))
#+end_src

*** Sending Mail
:PROPERTIES:
:ID:       14a0b646-f10a-401a-824f-402052202859
:END:

#+begin_src elisp
(after! mu4e
  (setq sendmail-program "/usr/bin/msmtp"
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from") ; , "--read-recipients")
        message-send-mail-function #'message-send-mail-with-sendmail))
#+end_src

*** TODO mu4e-views
:PROPERTIES:
:ID:       e8c11673-f1fa-47c8-894b-57f1becb3a2e
:END:

requies emacs compiled with ~xwidgets~

it can still use the browser view.
select via ~mu4e-views-mu4e-select-view-msg-method~

#+begin_src elisp
;; (use-package! mu4e-views
;;   :after mu4e
;;   )
#+end_src

*** org-msg
:PROPERTIES:
:ID:       0b9c8dce-ebc6-4025-861e-523afcb9f7a2
:END:

#+begin_src elisp
(setq +org-msg-accent-color "#1a5fb4"
      org-msg-greeting-fmt "\nHi %s,\n\n"
      org-msg-signature "\n\n#+begin_signature\n*MfG Stefan Lendl*\n#+end_signature")

(map! :map org-msg-edit-mode-map
      :after org-msg
      :n "G" #'org-msg-goto-body)
#+end_src

** ediff
:PROPERTIES:
:ID:       c186f137-d99f-45ab-930b-297091895183
:END:

forcing text comparison even if diff thinks files are binary
#+begin_src elisp
(after! ediff
  (setq ediff-diff-options "--text"
        ediff-diff3-options "--text"
        ediff-toggle-skip-similar t
        ediff-diff-options "-w"
        ;; ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally
        ediff-floating-control-frame t
        ))

#+end_src

** diffview

Render a unified diff (top/bottom) in an easy-to-comprehend side-by-side format. This comes in handy for reading patches from mailing lists (or from whencever you might acquire them).

#+begin_src elisp :tangle packages.el
(package! diffview :disable t)
#+end_src

#+begin_src elisp
(use-package! diffview
  :commands diffview-current
  :config
  (map!
   :after notmuch
   :localleader "d" #'diffview-current))
#+end_src

** blamer.el

https://github.com/Artawower/blamer.el
git blame lenses

#+begin_src elisp :tangle packages.el
(package! blamer :disable t)
#+end_src

#+begin_src elisp
(use-package! blamer
  :commands global-blamer-mode
  :init (map! :leader "t B" #'global-blamer-mode)
  :config
  (map! :leader "g i" #'blamer-show-posframe-commit-info)
  (setq! blamer-idle-time 0.3
         blamer-type 'visual
         blamer-max-commit-message-length 80
         ;; blamer-max-lines 100
         ;; blamer-type 'posframe-popup
         ;; blamer-type 'overlay-popup
         blamer-min-offset 40)
  ;; (add-hook! org-mode-hook (λ! (blamer-mode 0)))
  )
#+end_src

* AI

#+begin_src elisp
(map!
      ;; "C-c a" #'aidermacs-transient-menu
      :leader
      (:prefix ("j" . "AI")
       ;; "m" #'gptel-menu
       ;; "j" #'gptel
       ;; "C-g" #'gptel-abort
       ;; "C-c" #'gptel-abort
       ;; :desc "Toggle context" "C" #'gptel-add
       ;; "s" #'gptel-system-prompt
       ;; "w" #'gptel-rewrite-menu
       ;; "t" #'gptel-org-set-topic
       ;; "P" #'gptel-org-set-properties
       
       "a" #'aidermacs-transient-menu
       ;; "a" #'aider-transient-menu
       
       ;; "e" #'elysium-query
       
       (:prefix ("c" . "Copilot Chat")
        ;; "" #'copilot-chat-reset  ;; reset everything including history, buffers and frontend.
        "c" #'copilot-chat-display  ;; display copilot chat buffers.
        "s" #'copilot-chat-explain-symbol-at-line  ;; ask Copilot to explain symbol under point.
        "e" #'copilot-chat-explain  ;; ask copilot to explain selected code.
        "r" #'copilot-chat-review  ;; ask copilot to review selected code.
        "d" #'copilot-chat-doc  ;; ask copilot to document selected code.
        "f" #'copilot-chat-fix  ;; ask copilot to fix selected code.
        "o" #'copilot-chat-optimize  ;; ask copilot to optimize selected code.
        "t" #'copilot-chat-test  ;; ask copilot to write tests for selected code.
        ;; :n "" #'copilot-chat-custom-prompt-selection  ;; ask for a prompt in minibuffer and pastes selection after it before sending it to copilot.
        "b" #'copilot-chat-add-current-buffer  ;; add current buffer to copilot chat. Its content will be sent with every request.
        "B" #'copilot-chat-del-current-buffer  ;; remove current buffer.
        "l" #'copilot-chat-list  ;; open buffer list.
        ;; "" #'copilot-chat-prompt-history-previous  ;; insert previous prompt from history in prompt buffer.
        ;; "" #'copilot-chat-prompt-history-next  ;; insert next prompt from history in prompt buffer.
        "a" #'copilot-chat-ask-and-insert  ;; ask for a custom prompt and write answer in current buffer at point.
        "m" #'copilot-chat-insert-commit-message  ;; Insert in the current buffer a copilot generated commit message.
        )))
#+end_src

** Copilot
:PROPERTIES:
:ID:       ee6aaae4-4c0e-4eff-b758-72cdb6cc4e4b
:END:

#+begin_src elisp :tangle packages.el
(package! copilot
  :recipe (:host github
           :repo "zerolfx/copilot.el"
           :files ("*.el" "dist")))
#+end_src

#+begin_src elisp
#+end_src

#+begin_src elisp
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :after prog-mode
  :config
  ;; Define the custom function that either accepts the completion or does the default behavior
  (defun +copilot-tab-or-default ()
    (interactive)
    (if (and (bound-and-true-p copilot-mode)
             ;; Add any other conditions to check for active copilot suggestions if necessary
             )
        (copilot-accept-completion)
      (evil-insert 1))) ; Default action to insert a tab. Adjust as needed.
  
  ;; Bind the custom function to <tab> in Evil's insert state
  ;; (evil-define-key 'insert 'global (kbd "<tab>") #'+copilot-tab-or-default)

  (map! :map copilot-completion-map
        "<tab>" #'+copilot-tab-or-default
        "TAB" #'+copilot-tab-or-default
        ;; :i "C-TAB" #'copilot-accept-completion-by-word
        ;; :i "C-<tab>" #'copilot-accept-completion-by-word
        "C-S-n" #'copilot-next-completion
        ;; :i "C-<tab>" #'copilot-next-completion
        "C-S-p" #'copilot-previouse-completion
        ;; :i "C-<iso-lefttab>" #'copilot-previouse-completion
        )
  
  (add-to-list 'copilot-indentation-alist '(org-mode 2))
  
  (setq! copilot-indent-offset-warning-disable t
         copilot-max-char-warning-disable t)
  )
#+end_src

** Copilot Chat

#+begin_src elisp :tangle packages.el
(package! copilot-chat
  :recipe (:host github
           :repo "chep/copilot-chat.el"
           :files ("*.el")))
#+end_src
#+end_src

#+begin_src elisp
(use-package copilot-chat
  :after org
  :commands (copilot-chat-insert-commit-message copilot-chat-fix copilot-chat-doc)
  :config (setq! copilot-chat-model "claude-3.7-sonnet"
                 copilot-chat-frontend 'org)
  
  ;; (add-hook 'git-commit-setup-hook 'copilot-chat-insert-commit-message)
  ;; Or call manually (copilot-chat-insert-commit-message) when in the commit message buffer.
  )
#+end_src

** KILL Codeium

A free alternative to Github Copilot

#+begin_src elisp :tangle packages.el
(package! codeium
  :recipe (:host github
           :repo "Exafunction/codeium.el")
  :disable t)
#+end_src

#+begin_src elisp
(use-package! codeium
  :defer t  ;; TODO to start it, manually call codeium-init

  ;; if you use straight
  ;; :straight '(:type git :host github :repo "Exafunction/codeium.el")
  ;; otherwise, make sure that the codeium.el file is on load-path

  :init
  ;; use globally
  (add-to-list 'completion-at-point-functions #'codeium-completion-at-point)
  ;; (add-to-list 'company-frontends #'company-preview-frontend)
  (setq company-minimum-prefix-length 0)

  ;; or on a hook
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local completion-at-point-functions '(codeium-completion-at-point))))

  ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local completion-at-point-functions
  ;;             (list (cape-super-capf #'codeium-completion-at-point #'lsp-completion-at-point)))))

  ;; TODO for completion at point to work need to add codeium-completion-at-point to completion-at-point-an

  ;; functions async company-backend is coming soon!

  ;; codeium-completion-at-point is autoloaded, but you can
  ;; optionally set a timer, which might speed up things as the
  ;; codeium local language server takes ~0.2s to start up
  ;; (add-hook 'emacs-startup-hook
  ;;  (lambda () (run-with-timer 0.1 nil #'codeium-init)))

  :config
  (setq use-dialog-box nil) ;; do not use popup boxes

  ;; if you don't want to use customize to save the api-key
  (setq codeium/metadata/api_key (password-store-get "API/Codeium"))

  ;; get codeium status in the modeline
  (setq codeium-mode-line-enable
        (lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
  (add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)
  ;; alternatively for a more extensive mode-line
  ;; (add-to-list 'mode-line-format '(-50 "" codeium-mode-line) t)

  ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
  (setq codeium-api-enabled
        (lambda (api)
          (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))
  ;; you can also set a config for a single buffer like this:
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local codeium/editor_options/tab_size 4)))

  ;; You can overwrite all the codeium configs!
  ;; for example, we recommend limiting the string sent to codeium for better performance
  (defun my-codeium/document/text ()
    (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))
  ;; if you change the text, you should also change the cursor_offset
  ;; warning: this is measured by UTF-8 encoded bytes
  (defun my-codeium/document/cursor_offset ()
    (codeium-utf8-byte-length
     (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
  (setq codeium/document/text 'my-codeium/document/text)
  (setq codeium/document/cursor_offset 'my-codeium/document/cursor_offset)

  (let ((codeium-exe (executable-find "codeium_language_server")))
    (when codeium-exe
      (setq codeium-command-executable codeium-exe)))
  )
#+end_src

** gptel

#+begin_src elisp :tangle packages.el
;; (package! gptel)
#+end_src

If get-password does not reply a proper key.. manually clear the auth-source cache with:
#+begin_src elisp :tangle no :results silent
;; (auth-source-forget-all-cached)
#+end_src

#+begin_src elisp
;; (use-package! gptel
;;   :after password-store
;;   :commands (gptel gptel-menu)
;;   :config
(after! gptel
  (setq! gptel-default-mode 'org-mode
         ;; gptel-response-prefix-alist '((org-mode . "**** Answer"))
         gptel-api-key (password-store-get "API/OpenAI-emacs")
         ;; gptel-model 'gpt-4o
         gptel-model 'gemini-pro
         ;; 'gpt-4.5-preview
         gptel-log-level 'info
         ;; gptel-use-curl nil
         gptel-use-curl t
         gptel-stream t)

  (defun +gptel-font-lock-update (pos pos-end)
    ;; used with the gptel-post-response-functions hook but swollows the arguments
    (font-lock-update))
  
  ;; reload font-lock to fix syntax highlighting of org-babel src blocks
  (add-hook 'gptel-post-response-functions '+gptel-font-lock-update)

  (gptel-make-gemini "Gemini" :stream t
    :key (password-store-get "API/Gemini-emacs"))
  
  (gptel-make-anthropic "Claude"          ;Any name you want
    :stream t                             ;Streaming responses
    :key (password-store-get "API/Claude-emacs"))
  
  (gptel-make-perplexity "Perplexity"          ;Any name you want
    :stream t                             ;Streaming responses
    :key (password-store-get "API/Perplexity-emacs-pro-ste.lendl"))
    
  ;; Perplexity offers an OpenAI compatible API
  ;; NOTE https://docs.perplexity.ai/guides/model-cards
  ;; (gptel-make-openai "Perplexity"         ;Any name you want
  ;;   :host "api.perplexity.ai"
  ;;   :key (password-store-get "API/Perplexity-gptel")
  ;;   :endpoint "/chat/completions"
  ;;   :stream t
  ;;   :models '(sonar
  ;;             sonar-pro
  ;;             sonar-reasoning
  ;;             sonar-reasoning-pro
  ;;             sonar-deep-research	
  ;;             r1-1776	
  ;;             ))

  ;; (set-popup-rules!
  ;;   '(("^\\*ChatGPT\\*" :select t :quit nil :ttl nil :modeline t :persist t)
  ;;     ("^\\*Perplexity\\*" :select t :quit nil :ttl nil :modeline t :persist t)
  ;;     ("^\\*Claude\\*"  :select t :quit nil :ttl nil :modeline t :persist t)))
  
  (setf (alist-get 'perplexity gptel-directives) "You are Perplxity, a helpful search assistant, living in Emacs.

Your task is to deliver a concise and accurate response to a user's query, drawing from the given search results. Your answer must be precise, of high-quality, and written by an expert using an unbiased and journalistic tone. It is EXTREMELY IMPORTANT to directly answer the query. NEVER say 'based on the search results' or start your answer with a heading or title. Get straight to the point. Your answer must be written in the same language as the query, even if language preference is different.

You MUST cite the most relevant search results that answer the query. Do not mention any irrelevant results. You MUST ADHERE to the following instructions for citing search results:

- To cite a search result, enclose its index located above the summary with brackets at the end of the corresponding sentence, for example 'Ice is less dense than water[1][2].'
or 'Paris is the capital of France[1][4][5].'
- NO SPACE between the last word and the citation, and ALWAYS use brackets. Only use this format to cite search results. 
- If you don't know the answer or the premise is incorrect, explain why. If the search results are empty or unhelpful, answer the query as well as you can with existing knowledge.
- ALWAYS include a References section at the end of your answer. in the format
  #### References
  [1] <Title> <link>
  [2] <Title> <link>

Use markdown to format paragraphs, lists, tables, and quotes whenever possible.

- Use headings level 4 to separate sections of your response, like '#### Header'.
- Use single new lines for lists and double new lines for paragraphs.
- Use markdown to render images given in the search results.")
  
  (setf (alist-get 'cpp gptel-directives) "You are an expert C++ developer using C++20. ONLY use C++20 features availible in gcc12.
Do not use concepts. For functions, methods and variables use the style 'auto method() -> RetType'
Reply concisely. Wrap source code in a ```cpp block.")
  
  ;; (transient-suffix-put 'gptel-menu (kbd "RET") :key "<f8>")
  )
#+end_src

~NOTE~ this renames the buffer it was called from, not the gptel created buffer...

#+begin_src elisp
;; (after! gptel
;;   (defadvice! +gptel--rename-buffer (&rest args)
;;     "rename gptel buffers to a *gptel prefix"
;;     :filter-return #'gptel
;;         (unless (string-prefix-p "*gptel" (buffer-name))
;;           (rename-buffer (generate-new-buffer-name (concat "*gptel " (buffer-name))) t)
;;           (message "renamed gptel buffer to %s" (buffer-name))))
;;   )
#+end_src

** Aidermacs

#+begin_src elisp :tangle packages.el
(package! aidermacs
    :recipe (:host github
             :repo "MatthewZMD/aidermacs"
             :files ("*.el")))
#+end_src

#+begin_src elisp
(use-package! aidermacs
  :commands (aidermacs-transient-menu)
  :init
  (add-hook 'aidermacs-before-run-backend-hook
          (lambda ()
            (message "Setting up API keys")
            (setenv "OPENAI_API_KEY" (password-store-get "API/OpenAI-emacs"))
            (setenv "ANTHROPIC_API_KEY" (password-store-get "API/Claude-emacs"))
            (setenv "GEMINI_API_KEY" (password-store-get "API/Gemini-emacs"))
            (setenv "PERPLEXITYAI_API_KEY" (password-store-get "API/Perplexity-emacs-pro-ste.lendl"))
            (setenv "OPENROUTER_API_KEY" (password-store-get "API/Openrouter-emacs"))
            ))
  :config
  (setq! aidermacs-default-chat-mode 'architect
         ;; aidermacs-default-model "openrouter/google/gemini-2.5-pro"
         aidermacs-default-model "openrouter/anthropic/claude-sonnet-4"
         aidermacs-architect-model "openrouter/anthropic/claude-sonnet-4"
         ;; aidermacs-architect-model "openrouter/x-ai/grok-4"
         ;; aidermacs-weak-model "openrouter/google/gemini-2.5-flash"
         aidermacs-weak-model "openrouter/deepseek/deepseek-r1-0528"
         ;; aidermacs-backend 'vterm
         aidermacs-backend 'comint
         aidermacs-watch-files t
         aidermacs-extra-args '("--thinking-tokens" "8k" "--reasoning-effort" "medium"))
  (set-popup-rule! "^\\*aidermacs:"
    :select t
    :size 0.3
    :quit nil
    :ttl nil)
  )
#+end_src

